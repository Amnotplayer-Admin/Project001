#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GUI แบบมินิมอลสำหรับระบบทำนายช่องโหว่ในซอร์สโค้ด
ธีมดำ-น้ำเงินอวกาศแบบเรียบง่าย

พัฒนาโดย: AI Assistant
เวอร์ชัน: 1.0 (Minimal Space Theme)
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import os
from simple_vulnerability_predictor import SimpleVulnerabilityPredictor

class SimpleVulnerabilityGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("ระบบทำนายช่องโหว่ในซอร์สโค้ด - Minimal Space")
        self.root.geometry("1000x700")
        self.root.configure(bg='#0d1117')
        
        # กำหนดธีมมินิมอลอวกาศ (ดำ-น้ำเงิน)
        self.space_theme = {
            'bg_primary': '#0d1117',        # สีพื้นหลังหลัก (GitHub dark)
            'bg_secondary': '#161b22',      # สีพื้นหลังรอง
            'bg_tertiary': '#21262d',       # สีพื้นหลังที่สาม
            'bg_card': '#30363d',           # สีพื้นหลังการ์ด
            'text_primary': '#f0f6fc',      # สีข้อความหลัก
            'text_secondary': '#8b949e',    # สีข้อความรอง
            'text_muted': '#6e7681',        # สีข้อความจาง
            'accent_blue': '#1f6feb',       # สีน้ำเงินเน้น
            'accent_cyan': '#00d4ff',       # สีฟ้าเน้น
            'border': '#30363d',            # สีขอบ
            'danger': '#da3633',            # สีแดง (อันตราย)
            'success': '#238636',           # สีเขียว (ปลอดภัย)
            'warning': '#d29922',           # สีเหลือง (คำเตือน)
            'hover': '#262c36'              # สีเมื่อ hover
        }
        
        # สร้าง instance ของ SimpleVulnerabilityPredictor
        self.predictor = SimpleVulnerabilityPredictor()
        
        # สร้าง GUI
        self.create_widgets()
    
    def create_widgets(self):
        """สร้าง widgets ต่างๆ"""
        # กรอบหัวข้อหลัก
        title_frame = tk.Frame(self.root, bg=self.space_theme['bg_primary'])
        title_frame.pack(pady=20, padx=20)
        
        # หัวข้อหลัก (มินิมอล)
        title_label = tk.Label(
            title_frame,
            text="Vulnerability Scanner",
            font=("Segoe UI", 20),  # ใช้ฟอนต์ที่มีใน Windows
            bg=self.space_theme['bg_primary'],
            fg=self.space_theme['text_primary']
        )
        title_label.pack()
        
        # หัวข้อย่อย (เรียบง่าย)
        subtitle_label = tk.Label(
            title_frame,
            text="Simple code vulnerability detection",
            font=("Segoe UI", 12),
            bg=self.space_theme['bg_primary'],
            fg=self.space_theme['text_muted']
        )
        subtitle_label.pack(pady=(5, 0))
        
        # สร้าง notebook สำหรับแท็บต่างๆ
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill='both', expand=True, padx=20, pady=15)
        
        # ปรับแต่ง style ของ notebook แบบมินิมอล
        style = ttk.Style()
        style.theme_use('clam')
        
        # ปรับแต่ง style ของ notebook tabs แบบมินิมอล
        style.configure('TNotebook', 
                       background=self.space_theme['bg_primary'],
                       borderwidth=0,
                       tabmargins=[0, 5, 0, 0])
        style.configure('TNotebook.Tab', 
                       background=self.space_theme['bg_secondary'],
                       foreground=self.space_theme['text_secondary'],
                       padding=[20, 10],
                       font=('SF Pro Display', 10),
                       borderwidth=0)
        style.map('TNotebook.Tab',
                 background=[('selected', self.space_theme['bg_primary']),
                           ('active', self.space_theme['hover'])],
                 foreground=[('selected', self.space_theme['accent_blue']),
                           ('active', self.space_theme['text_primary'])])
        
        # แท็บการวิเคราะห์โค้ด
        self.create_code_analysis_tab(notebook)
        
        # แท็บการวิเคราะห์ไฟล์
        self.create_file_analysis_tab(notebook)
        
        # แท็บเกี่ยวกับ
        self.create_about_tab(notebook)
    
    def create_code_analysis_tab(self, notebook):
        """สร้างแท็บการวิเคราะห์โค้ด"""
        analysis_frame = tk.Frame(notebook, bg=self.space_theme['bg_primary'])
        notebook.add(analysis_frame, text="Code Analysis")
        
        # กรอบสำหรับป้อนโค้ด
        code_frame = tk.Frame(analysis_frame, bg=self.space_theme['bg_primary'])
        code_frame.pack(fill='both', expand=True, padx=30, pady=20)
        
        # หัวข้อย่อย (มินิมอล)
        tk.Label(
            code_frame,
            text="Source Code",
            font=("Segoe UI", 14, "bold"),
            bg=self.space_theme['bg_primary'],
            fg=self.space_theme['text_primary']
        ).pack(anchor='w', pady=(0, 10))
        
        # กรอบโค้ด
        code_container = tk.Frame(code_frame, bg=self.space_theme['bg_secondary'], relief='flat', bd=0)
        code_container.pack(fill='both', expand=True)
        
        self.code_text = scrolledtext.ScrolledText(
            code_container,
            width=80,
            height=15,
            font=("JetBrains Mono", 11),
            bg=self.space_theme['bg_secondary'],
            fg=self.space_theme['text_primary'],
            insertbackground=self.space_theme['accent_cyan'],
            selectbackground=self.space_theme['accent_blue'],
            selectforeground=self.space_theme['text_primary'],
            relief='flat',
            bd=0,
            highlightthickness=0
        )
        self.code_text.pack(fill='both', expand=True, padx=1, pady=1)
        
        # ปุ่มวิเคราะห์ (มินิมอล)
        button_frame = tk.Frame(analysis_frame, bg=self.space_theme['bg_primary'])
        button_frame.pack(pady=20)
        
        self.analyze_button = tk.Button(
            button_frame,
            text="Analyze Code",
            command=self.analyze_code,
            font=("Segoe UI", 12),
            bg=self.space_theme['accent_blue'],
            fg=self.space_theme['text_primary'],
            relief='flat',
            padx=30,
            pady=12,
            cursor='hand2',
            bd=0,
            highlightthickness=0
        )
        self.analyze_button.pack()
        
        # เอฟเฟกต์ hover แบบมินิมอล
        def on_enter(e):
            self.analyze_button['bg'] = '#2188ff'  # สีน้ำเงินอ่อนขึ้น
            
        def on_leave(e):
            self.analyze_button['bg'] = self.space_theme['accent_blue']
            
        self.analyze_button.bind("<Enter>", on_enter)
        self.analyze_button.bind("<Leave>", on_leave)
        
        # แสดงผลการวิเคราะห์
        result_frame = tk.Frame(analysis_frame, bg=self.space_theme['bg_primary'])
        result_frame.pack(fill='both', expand=True, padx=30, pady=(0, 20))
        
        # หัวข้อผลการวิเคราะห์
        tk.Label(
            result_frame,
            text="Analysis Result",
            font=("Segoe UI", 14, "bold"),
            bg=self.space_theme['bg_primary'],
            fg=self.space_theme['text_primary']
        ).pack(anchor='w', pady=(0, 10))
        
        # กรอบผลการวิเคราะห์
        result_container = tk.Frame(result_frame, bg=self.space_theme['bg_secondary'], relief='flat', bd=0)
        result_container.pack(fill='both', expand=True)
        
        self.analysis_result = scrolledtext.ScrolledText(
            result_container,
            width=80,
            height=15,
            font=("JetBrains Mono", 10),
            bg=self.space_theme['bg_secondary'],
            fg=self.space_theme['text_primary'],
            insertbackground=self.space_theme['accent_cyan'],
            selectbackground=self.space_theme['accent_blue'],
            selectforeground=self.space_theme['text_primary'],
            relief='flat',
            bd=0,
            highlightthickness=0,
            state='disabled'
        )
        self.analysis_result.pack(fill='both', expand=True, padx=1, pady=1)
    
    def create_file_analysis_tab(self, notebook):
        """สร้างแท็บการวิเคราะห์ไฟล์"""
        file_frame = tk.Frame(notebook, bg=self.space_theme['bg_primary'])
        notebook.add(file_frame, text="File Analysis")
        
        # กรอบสำหรับเลือกไฟล์
        select_frame = tk.Frame(file_frame, bg=self.space_theme['bg_primary'])
        select_frame.pack(pady=30, padx=30)
        
        # หัวข้อ
        tk.Label(
            select_frame,
            text="Select File",
            font=("Segoe UI", 14, "bold"),
            bg=self.space_theme['bg_primary'],
            fg=self.space_theme['text_primary']
        ).pack(anchor='w', pady=(0, 15))
        
        # กรอบสำหรับ input และปุ่ม
        input_frame = tk.Frame(select_frame, bg=self.space_theme['bg_primary'])
        input_frame.pack(fill='x')
        
        self.file_path_var = tk.StringVar()
        file_entry = tk.Entry(
            input_frame,
            textvariable=self.file_path_var,
            width=60,
            font=("Segoe UI", 11),
            bg=self.space_theme['bg_secondary'],
            fg=self.space_theme['text_primary'],
            insertbackground=self.space_theme['accent_cyan'],
            selectbackground=self.space_theme['accent_blue'],
            selectforeground=self.space_theme['text_primary'],
            relief='flat',
            bd=0,
            highlightthickness=1,
            highlightcolor=self.space_theme['accent_blue'],
            highlightbackground=self.space_theme['border']
        )
        file_entry.pack(side='left', ipady=8, padx=(0, 15))
        
        # ปุ่มเลือกไฟล์ (มินิมอล)
        browse_button = tk.Button(
            input_frame,
            text="Browse",
            command=self.browse_file,
            font=("Segoe UI", 11),
            bg=self.space_theme['bg_tertiary'],
            fg=self.space_theme['text_secondary'],
            relief='flat',
            padx=20,
            pady=8,
            cursor='hand2',
            bd=0,
            highlightthickness=0
        )
        browse_button.pack(side='left')
        
        # เอฟเฟกต์ hover สำหรับปุ่มเลือกไฟล์
        def on_browse_enter(e):
            browse_button['bg'] = self.space_theme['hover']
            browse_button['fg'] = self.space_theme['text_primary']
            
        def on_browse_leave(e):
            browse_button['bg'] = self.space_theme['bg_tertiary']
            browse_button['fg'] = self.space_theme['text_secondary']
            
        browse_button.bind("<Enter>", on_browse_enter)
        browse_button.bind("<Leave>", on_browse_leave)
        
        # ปุ่มวิเคราะห์ไฟล์ (มินิมอล)
        file_button_frame = tk.Frame(file_frame, bg=self.space_theme['bg_primary'])
        file_button_frame.pack(pady=25)
        
        self.analyze_file_button = tk.Button(
            file_button_frame,
            text="Analyze File",
            command=self.analyze_file,
            font=("Segoe UI", 12),
            bg=self.space_theme['accent_blue'],
            fg=self.space_theme['text_primary'],
            relief='flat',
            padx=30,
            pady=12,
            cursor='hand2',
            bd=0,
            highlightthickness=0
        )
        self.analyze_file_button.pack()
        
        # เอฟเฟกต์ hover
        def on_file_enter(e):
            self.analyze_file_button['bg'] = '#2188ff'
            
        def on_file_leave(e):
            self.analyze_file_button['bg'] = self.space_theme['accent_blue']
            
        self.analyze_file_button.bind("<Enter>", on_file_enter)
        self.analyze_file_button.bind("<Leave>", on_file_leave)
        
        # แสดงผลการวิเคราะห์ไฟล์
        file_result_frame = tk.Frame(file_frame, bg=self.space_theme['bg_primary'])
        file_result_frame.pack(fill='both', expand=True, padx=30, pady=(0, 20))
        
        # หัวข้อผลการวิเคราะห์
        tk.Label(
            file_result_frame,
            text="File Analysis Result",
            font=("Segoe UI", 14, "bold"),
            bg=self.space_theme['bg_primary'],
            fg=self.space_theme['text_primary']
        ).pack(anchor='w', pady=(0, 10))
        
        # กรอบผลการวิเคราะห์ไฟล์
        file_result_container = tk.Frame(file_result_frame, bg=self.space_theme['bg_secondary'], relief='flat', bd=0)
        file_result_container.pack(fill='both', expand=True)
        
        self.file_analysis_result = scrolledtext.ScrolledText(
            file_result_container,
            width=80,
            height=15,
            font=("JetBrains Mono", 10),
            bg=self.space_theme['bg_secondary'],
            fg=self.space_theme['text_primary'],
            insertbackground=self.space_theme['accent_cyan'],
            selectbackground=self.space_theme['accent_blue'],
            selectforeground=self.space_theme['text_primary'],
            relief='flat',
            bd=0,
            highlightthickness=0,
            state='disabled'
        )
        self.file_analysis_result.pack(fill='both', expand=True, padx=1, pady=1)
    
    def create_about_tab(self, notebook):
        """สร้างแท็บเกี่ยวกับ"""
        about_frame = tk.Frame(notebook, bg=self.space_theme['bg_primary'])
        notebook.add(about_frame, text="About")
        
        # กรอบเนื้อหา
        content_frame = tk.Frame(about_frame, bg=self.space_theme['bg_primary'])
        content_frame.pack(fill='both', expand=True, padx=40, pady=40)
        
        # หัวข้อ
        title_label = tk.Label(
            content_frame,
            text="About",
            font=("Segoe UI", 18, "bold"),
            bg=self.space_theme['bg_primary'],
            fg=self.space_theme['text_primary']
        )
        title_label.pack(anchor='w', pady=(0, 30))
        
        # ข้อมูลเกี่ยวกับระบบ (มินิมอล)
        about_text = """Simple Vulnerability Scanner

A minimal tool for detecting common vulnerabilities in source code.

Features:
• Built-in Python modules only
• No external dependencies required  
• Multi-language support
• Clean, minimal interface
• Comprehensive reporting

Detected Vulnerabilities:
• Code Injection (eval, exec, __import__)
• SQL Injection
• Command Injection (os.system, subprocess)
• File Path Traversal
• Pickle Deserialization
• Unsafe HTTP Requests
• Password Exposure
• Directory Traversal

Note: This is a basic scanning tool. 
For production use, combine with professional security audits.

Version: 1.0 (Minimal Space Theme)
        """
        
        about_label = tk.Label(
            content_frame,
            text=about_text,
            font=("Segoe UI", 11),
            bg=self.space_theme['bg_primary'],
            fg=self.space_theme['text_secondary'],
            justify='left',
            anchor='nw'
        )
        about_label.pack(fill='both', expand=True)
    
    def analyze_code(self):
        """วิเคราะห์โค้ด"""
        try:
            code = self.code_text.get(1.0, tk.END).strip()
            if not code:
                messagebox.showwarning("Warning", "Please enter source code before analysis")
                return
            
            # วิเคราะห์โค้ด
            results = self.predictor.analyze_code(code)
            
            # แสดงผลการวิเคราะห์
            self.analysis_result.config(state='normal')
            self.analysis_result.delete(1.0, tk.END)
            
            # สรุปผล (มินิมอล)
            if results['is_vulnerable']:
                self.analysis_result.insert(tk.END, f"Status: {results['vulnerability_count']} vulnerabilities found\n")
                self.analysis_result.insert(tk.END, f"Risk Level: {results['risk_level']}\n\n")
            else:
                self.analysis_result.insert(tk.END, "Status: No vulnerabilities detected\n\n")
            
            # คุณลักษณะพื้นฐาน
            self.analysis_result.insert(tk.END, "Code Metrics:\n")
            features = results['features']
            self.analysis_result.insert(tk.END, f"Lines: {features['lines']}\n")
            self.analysis_result.insert(tk.END, f"Characters: {features['chars']}\n")
            self.analysis_result.insert(tk.END, f"Words: {features['words']}\n")
            self.analysis_result.insert(tk.END, f"Security keywords: {features['security_keywords']}\n")
            self.analysis_result.insert(tk.END, f"Dangerous functions: {features['dangerous_functions']}\n\n")
            
            # รายละเอียดช่องโหว่
            if results['vulnerabilities']:
                self.analysis_result.insert(tk.END, "Vulnerabilities Found:\n")
                for i, vuln in enumerate(results['vulnerabilities'], 1):
                    self.analysis_result.insert(tk.END, f"{i}. {vuln['type']}\n")
                    self.analysis_result.insert(tk.END, f"   Risk: {vuln['risk']}\n")
                    self.analysis_result.insert(tk.END, f"   Matches: {vuln['matches']}\n\n")
            
            # คำแนะนำ
            if results['recommendations']:
                self.analysis_result.insert(tk.END, "Recommendations:\n")
                for rec in results['recommendations']:
                    self.analysis_result.insert(tk.END, f"• {rec}\n")
            
            # บันทึกรายงาน
            if self.predictor.save_analysis_report(results, "code_analysis_report.json"):
                self.analysis_result.insert(tk.END, "\nReport saved: code_analysis_report.json\n")
            
            self.analysis_result.config(state='disabled')
            
        except Exception as e:
            messagebox.showerror("Error", f"Analysis failed: {str(e)}")
    
    def browse_file(self):
        """เลือกไฟล์"""
        filepath = filedialog.askopenfilename(
            title="Select source code file",
            filetypes=[
                ("Python files", "*.py"),
                ("JavaScript files", "*.js"),
                ("Java files", "*.java"),
                ("C/C++ files", "*.c;*.cpp;*.h"),
                ("PHP files", "*.php"),
                ("All files", "*.*")
            ]
        )
        if filepath:
            self.file_path_var.set(filepath)
    
    def analyze_file(self):
        """วิเคราะห์ไฟล์"""
        try:
            filepath = self.file_path_var.get().strip()
            if not filepath:
                messagebox.showwarning("Warning", "Please select a file before analysis")
                return
            
            if not os.path.exists(filepath):
                messagebox.showerror("Error", "Selected file not found")
                return
            
            # วิเคราะห์ไฟล์
            results = self.predictor.analyze_file(filepath)
            
            # แสดงผลการวิเคราะห์
            self.file_analysis_result.config(state='normal')
            self.file_analysis_result.delete(1.0, tk.END)
            
            if 'error' in results:
                self.file_analysis_result.insert(tk.END, f"Error: {results['error']}\n")
                self.file_analysis_result.config(state='disabled')
                return
            
            # ข้อมูลไฟล์
            if 'file_info' in results:
                file_info = results['file_info']
                self.file_analysis_result.insert(tk.END, f"File: {file_info['path']}\n")
                self.file_analysis_result.insert(tk.END, f"Size: {file_info['size']} bytes\n")
                self.file_analysis_result.insert(tk.END, f"Modified: {file_info['modified']}\n\n")
            
            # สรุปผล (มินิมอล)
            if results['is_vulnerable']:
                self.file_analysis_result.insert(tk.END, f"Status: {results['vulnerability_count']} vulnerabilities found\n")
                self.file_analysis_result.insert(tk.END, f"Risk Level: {results['risk_level']}\n\n")
            else:
                self.file_analysis_result.insert(tk.END, "Status: No vulnerabilities detected\n\n")
            
            # คุณลักษณะพื้นฐาน
            self.file_analysis_result.insert(tk.END, "Code Metrics:\n")
            features = results['features']
            self.file_analysis_result.insert(tk.END, f"Lines: {features['lines']}\n")
            self.file_analysis_result.insert(tk.END, f"Characters: {features['chars']}\n")
            self.file_analysis_result.insert(tk.END, f"Words: {features['words']}\n")
            self.file_analysis_result.insert(tk.END, f"Security keywords: {features['security_keywords']}\n")
            self.file_analysis_result.insert(tk.END, f"Dangerous functions: {features['dangerous_functions']}\n\n")
            
            # รายละเอียดช่องโหว่
            if results['vulnerabilities']:
                self.file_analysis_result.insert(tk.END, "Vulnerabilities Found:\n")
                for i, vuln in enumerate(results['vulnerabilities'], 1):
                    self.file_analysis_result.insert(tk.END, f"{i}. {vuln['type']}\n")
                    self.file_analysis_result.insert(tk.END, f"   Risk: {vuln['risk']}\n")
                    self.file_analysis_result.insert(tk.END, f"   Matches: {vuln['matches']}\n\n")
            
            # คำแนะนำ
            if results['recommendations']:
                self.file_analysis_result.insert(tk.END, "Recommendations:\n")
                for rec in results['recommendations']:
                    self.file_analysis_result.insert(tk.END, f"• {rec}\n")
            
            # บันทึกรายงาน
            if self.predictor.save_analysis_report(results, "file_analysis_report.json"):
                self.file_analysis_result.insert(tk.END, "\nReport saved: file_analysis_report.json\n")
            
            self.file_analysis_result.config(state='disabled')
            
        except Exception as e:
            messagebox.showerror("Error", f"File analysis failed: {str(e)}")

def main():
    root = tk.Tk()
    app = SimpleVulnerabilityGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()